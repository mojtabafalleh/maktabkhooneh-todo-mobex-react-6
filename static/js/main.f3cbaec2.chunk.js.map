{"version":3,"sources":["models/TodoModel.js","models/TodoList.js","views/TodoView.js","constants.js","views/TodoListView.js","views/TOdoEntry.js","views/Footerview.js","models/ViewStore.js","App.js","reportWebVitals.js","index.js"],"names":["TodoModel","store","title","id","completed","finished","makeObservable","this","observable","toggle","action","console","log","todos","remove","object","TodoList","lastId","unfinishedTodoCount","computed","completedCount","activeTodoCount","addTodo","toggleAll","clearCompleted","filter","todo","length","push","forEach","map","toJS","reduce","sum","array","todolist","item","fromJS","TodoView","observer","class","className","type","checked","onClick","destroy","value","ACTIVE_TODOS","COMPLETED_TODOS","TodoListView","todoList","viewStore","todoFilter","TodoEntry","handleNewTodoKeyDown","event","keyCode","preventDefault","val","ReactDOM","findDOMNode","refs","newField","trim","props","ref","placeholder","onKeyDown","autoFocus","React","Component","Footerview","count","word","activeTodoWord","renderFilterLink","filterName","url","caption","href","ViewStore","todoBeingEdited","App","for","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementById"],"mappings":"+MAEqBA,E,WAKnB,WAAYC,EAAOC,EAAOC,EAAIC,GAAY,yBAH1CF,MAAQ,GAGiC,KAFzCG,UAAW,EAGTC,YAAeC,KAAM,CACnBL,MAAOM,IACPH,SAAUG,IACVC,OAAQC,MAEVH,KAAKL,MAAQA,EACbK,KAAKN,MAAQA,EACbM,KAAKJ,GAAKA,E,qDAIVI,KAAKF,UAAYE,KAAKF,W,gCAGtBM,QAAQC,IAAIL,KAAKN,OACjBM,KAAKN,MAAMY,MAAMC,OAAOP,Q,+BAEjBL,GACPK,KAAKL,MAAQA,I,6BAIb,MAAO,CACLC,GAAII,KAAKJ,GACTD,MAAOK,KAAKL,MACZG,SAAUE,KAAKF,a,8BAILJ,EAAOc,GACnB,OAAO,IAAIf,EAAUC,EAAOc,EAAOZ,GAAIY,EAAOb,MAAOa,EAAOX,e,KCnC3CY,E,WAMnB,WAAYH,GAAQ,yBALpBA,MAAQ,GAKW,KAJnBI,OAAS,EAKPX,YAAeC,KAAM,CACnBM,MAAOL,IACPU,oBAAqBC,IACrBC,eAAgBD,IAChBE,gBAAiBF,IACjBG,QAASZ,IACTa,UAAWb,IACXc,eAAgBd,MAElBH,KAAKM,MAAQA,E,gEAZb,OAAON,KAAKM,MAAMY,QAAO,SAACC,GAAD,OAAWA,EAAKrB,YAAUsB,W,6CAc7CzB,GACNK,KAAKM,MAAMe,KAAK,IAAI5B,EAAUO,KAAML,EAAOK,KAAKU,UAAU,M,kCAG1DV,KAAKM,MAAMgB,SAAQ,SAACH,GAAD,OAAWA,EAAKrB,UAAW,O,uCAG9CE,KAAKM,MAAQN,KAAKM,MAAMY,QAAO,SAACC,GAAD,OAAWA,EAAKrB,c,oCAG/CE,KAAKM,MAAQN,KAAKM,MAAMY,QAAO,SAACC,GAAD,OAAUA,EAAKrB,c,6BAU9C,OAAOE,KAAKM,MAAMiB,KAAI,SAACJ,GAAD,OAAUA,EAAKK,Y,sCAPrC,OAAOxB,KAAKM,MAAMmB,QAAO,SAACC,EAAKP,GAAN,OAAeO,GAAOP,EAAKrB,SAAW,EAAI,KAAI,K,qCAIvE,OAAOE,KAAKM,MAAMc,OAASpB,KAAKc,mB,8BAMpBa,GACZ,IAAMC,EAAW,IAAInB,EAErB,OADAmB,EAAStB,MAAQqB,EAAMJ,KAAI,SAACM,GAAD,OAAUpC,EAAUqC,OAAOF,EAAUC,MACzDD,M,aC5BIG,EAlBEC,aAAS,gBAAGb,EAAH,EAAGA,KAAH,OACxB,oBAAIc,MAAM,YAAV,SACE,qBAAIC,UAAWf,EAAKrB,SAAW,YAAc,GAA7C,UACE,sBAAKmC,MAAM,OAAX,UACE,uBACEA,MAAM,SACNE,KAAK,WACLC,QAASjB,EAAKrB,SACduC,QAAS,kBAAMlB,EAAKjB,YAEtB,gCAAQiB,EAAKxB,QACb,wBAAQsC,MAAM,UAAUI,QAAS,kBAAMlB,EAAKmB,gBAE9C,uBAAOL,MAAM,OAAOM,MAAM,sCCbnBC,EAAe,SACfC,EAAkB,YC4ChBC,EAzCMV,aAAS,YAA8B,IAA3BW,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UAEzC,OADAxC,QAAQC,IAAIuC,EAAUC,YACdD,EAAUC,YAChB,KAAKL,EACH,OACE,8BACE,6BACGG,EAASrC,MAAMiB,KAAI,SAACJ,GAAD,OACjBA,EAAKrB,UAAW,cAAC,EAAD,CAAUqB,KAAMA,GAAWA,EAAKvB,WAO3D,KAAK6C,EACH,OACE,8BACE,6BACGE,EAASrC,MAAMiB,KAAI,SAACJ,GAAD,QAClBA,EAAKrB,UAAW,cAAC,EAAD,CAAUqB,KAAMA,GAAWA,EAAKvB,WAO1D,QACE,OACE,8BACE,6BACG+C,EAASrC,MAAMiB,KAAI,SAACJ,GAAD,OAClB,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKvB,eC/BzBkD,E,4MAanBC,qBAAuB,SAACC,GACtB,GAhBc,KAgBVA,EAAMC,QAAV,CAIAD,EAAME,iBAEN,IAAIC,EAAMC,IAASC,YAAY,EAAKC,KAAKC,UAAUhB,MAAMiB,OAErDL,IACF,EAAKM,MAAMd,SAAS5B,QAAQoC,GAC5BC,IAASC,YAAY,EAAKC,KAAKC,UAAUhB,MAAQ,M,uDAtBnD,OACE,uBACEmB,IAAI,WACJxB,UAAU,WACVyB,YAAY,yBACZC,UAAW5D,KAAK+C,qBAChBc,WAAW,Q,GARoBC,IAAMC,WCwC9BC,MA1CIhC,aAAS,YAA8B,IAA3BW,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACvC,IAAKD,EAAS7B,kBAAoB6B,EAAS9B,eAAgB,OAAO,KAElE,IAmCiBoD,EAAOC,EAnClBC,GAmCWF,EAnCgBtB,EAAS7B,gBAmClBoD,EAnCmC,OAoC1C,IAAVD,EAAcC,EAAOA,EAAO,KAlC7BE,EAAmB,SAACC,EAAYC,EAAKC,GACzC,OACE,+BACE,mBACEC,KAAM,KAAOF,EACbjC,QAAS,kBAAOO,EAAUC,WAAawB,GACvCnC,UAAWmC,IAAezB,EAAUC,WAAa,WAAa,GAHhE,SAKG0B,IACE,QAIX,OACE,yBAAQrC,UAAU,SAAlB,UACE,uBAAMA,UAAU,aAAhB,UACE,iCAASS,EAAS7B,kBADpB,IAC+CqD,EAD/C,WAGA,qBAAIjC,UAAU,UAAd,UACGkC,EH5BgB,MG4BY,GAAI,OAChCA,EAAiB5B,EAAc,SAAU,UACzC4B,EAAiB3B,EAAiB,YAAa,gBAElD,wBACEP,UAAU,kBACVG,QAAS,kBAAMM,EAAS1B,kBAF1B,mCC7BewD,EAGnB,aAAe,yBAFfC,gBAAkB,KAEJ,KADd7B,WJLuB,MIOrB9C,YAAeC,KAAM,CACnB0E,gBAAiBzE,IACjB4C,WAAY5C,OCCG0E,E,uKAEjB,IAAMjF,EAAQ,IAAIe,EAAS,IACrBmC,EAAY,IAAI6B,EAEtB,OACE,0BAASxC,MAAM,UAAf,UACE,yBAAQA,MAAM,SAAd,UACE,wCACA,cAAC,EAAD,CAAWU,SAAUjD,OAEvB,0BAASuC,MAAM,OAAf,UACE,uBAAOrC,GAAG,aAAaqC,MAAM,aAAaE,KAAK,aAC/C,uBAAOyC,IAAI,aAAX,kCACA,cAAC,EAAD,CAAcjC,SAAUjD,EAAOkD,UAAWA,OAE5C,cAAC,EAAD,CAAYD,SAAUjD,EAAOkD,UAAWA,W,GAhBfmB,aCElBc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDd1B,IAASkC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f3cbaec2.chunk.js","sourcesContent":["import { makeObservable, observable, action } from \"mobx\";\r\n\r\nexport default class TodoModel {\r\n  id;\r\n  title = \"\";\r\n  finished = false;\r\n  store;\r\n  constructor(store, title, id, completed) {\r\n    makeObservable(this, {\r\n      title: observable,\r\n      finished: observable,\r\n      toggle: action,\r\n    });\r\n    this.title = title;\r\n    this.store = store;\r\n    this.id = id;\r\n  }\r\n\r\n  toggle() {\r\n    this.finished = !this.finished;\r\n  }\r\n  destroy() {\r\n    console.log(this.store);\r\n    this.store.todos.remove(this);\r\n  }\r\n  setTitle(title) {\r\n    this.title = title;\r\n  }\r\n\r\n  toJS() {\r\n    return {\r\n      id: this.id,\r\n      title: this.title,\r\n      finished: this.finished,\r\n    };\r\n  }\r\n\r\n  static fromJS(store, object) {\r\n    return new TodoModel(store, object.id, object.title, object.completed);\r\n  }\r\n}\r\n","import { makeObservable, observable, computed, action } from \"mobx\";\r\nimport TodoModel from \"./TodoModel\";\r\n\r\nexport default class TodoList {\r\n  todos = [];\r\n  lastId = 0;\r\n  get unfinishedTodoCount() {\r\n    return this.todos.filter((todo) => !todo.finished).length;\r\n  }\r\n  constructor(todos) {\r\n    makeObservable(this, {\r\n      todos: observable,\r\n      unfinishedTodoCount: computed,\r\n      completedCount: computed,\r\n      activeTodoCount: computed,\r\n      addTodo: action,\r\n      toggleAll: action,\r\n      clearCompleted: action,\r\n    });\r\n    this.todos = todos;\r\n  }\r\n  addTodo(title) {\r\n    this.todos.push(new TodoModel(this, title, this.lastId++, false));\r\n  }\r\n  toggleAll() {\r\n    this.todos.forEach((todo) => (todo.finished = true));\r\n  }\r\n  clearCompleted() {\r\n    this.todos = this.todos.filter((todo) => !todo.finished);\r\n  }\r\n  clearActive() {\r\n    this.todos = this.todos.filter((todo) => todo.finished);\r\n  }\r\n  get activeTodoCount() {\r\n    return this.todos.reduce((sum, todo) => sum + (todo.finished ? 0 : 1), 0);\r\n  }\r\n\r\n  get completedCount() {\r\n    return this.todos.length - this.activeTodoCount;\r\n  }\r\n  toJS() {\r\n    return this.todos.map((todo) => todo.toJS());\r\n  }\r\n\r\n  static fromJS(array) {\r\n    const todolist = new TodoList();\r\n    todolist.todos = array.map((item) => TodoModel.fromJS(todolist, item));\r\n    return todolist;\r\n  }\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nconst TodoView = observer(({ todo }) => (\r\n  <ul class=\"todo-list\">\r\n    <li className={todo.finished ? \"completed\" : \"\"}>\r\n      <div class=\"view\">\r\n        <input\r\n          class=\"toggle\"\r\n          type=\"checkbox\"\r\n          checked={todo.finished}\r\n          onClick={() => todo.toggle()}\r\n        />\r\n        <label>{todo.title}</label>\r\n        <button class=\"destroy\" onClick={() => todo.destroy()}></button>\r\n      </div>\r\n      <input class=\"edit\" value=\"Create a TodoMVC template\" />\r\n    </li>\r\n  </ul>\r\n));\r\n\r\nexport default TodoView;\r\n","export const ALL_TODOS = 'all';\nexport const ACTIVE_TODOS = 'active';\nexport const COMPLETED_TODOS = 'completed';\n","import React, { Component } from \"react\";\r\nimport TodoView from \"./TodoView\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {  ACTIVE_TODOS, COMPLETED_TODOS } from \"../constants\";\r\n\r\nconst TodoListView = observer(({ todoList, viewStore }) => {\r\n  console.log(viewStore.todoFilter);\r\n  switch (viewStore.todoFilter) {\r\n    case ACTIVE_TODOS:\r\n      return (\r\n        <div>\r\n          <ul>\r\n            {todoList.todos.map((todo) =>\r\n              !todo.finished ? <TodoView todo={todo} key={todo.id} /> : false\r\n            )}\r\n          </ul>\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    case COMPLETED_TODOS:\r\n      return (\r\n        <div>\r\n          <ul>\r\n            {todoList.todos.map((todo) =>\r\n              todo.finished ? <TodoView todo={todo} key={todo.id} /> : false\r\n            )}\r\n          </ul>\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    default:\r\n      return (\r\n        <div>\r\n          <ul>\r\n            {todoList.todos.map((todo) => (\r\n              <TodoView todo={todo} key={todo.id} />\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n      break;\r\n  }\r\n});\r\n\r\nexport default TodoListView;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n\r\nconst ENTER_KEY = 13;\r\n\r\nexport default class TodoEntry extends React.Component {\r\n  render() {\r\n    return (\r\n      <input\r\n        ref=\"newField\"\r\n        className=\"new-todo\"\r\n        placeholder=\"What needs to be done?\"\r\n        onKeyDown={this.handleNewTodoKeyDown}\r\n        autoFocus={true}\r\n      />\r\n    );\r\n  }\r\n\r\n  handleNewTodoKeyDown = (event) => {\r\n    if (event.keyCode !== ENTER_KEY) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n\r\n    var val = ReactDOM.findDOMNode(this.refs.newField).value.trim();\r\n\r\n    if (val) {\r\n      this.props.todoList.addTodo(val);\r\n      ReactDOM.findDOMNode(this.refs.newField).value = \"\";\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { ALL_TODOS, ACTIVE_TODOS, COMPLETED_TODOS } from \"../constants\";\r\n\r\nconst Footerview = observer(({ todoList, viewStore }) => {\r\n  if (!todoList.activeTodoCount && !todoList.completedCount) return null;\r\n\r\n  const activeTodoWord = pluralize(todoList.activeTodoCount, \"item\");\r\n\r\n  const renderFilterLink = (filterName, url, caption) => {\r\n    return (\r\n      <li>\r\n        <a\r\n          href={\"#/\" + url}\r\n          onClick={() => (viewStore.todoFilter = filterName)}\r\n          className={filterName === viewStore.todoFilter ? \"selected\" : \"\"}\r\n        >\r\n          {caption}\r\n        </a>{\" \"}\r\n      </li>\r\n    );\r\n  };\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo-count\">\r\n        <strong>{todoList.activeTodoCount}</strong> {activeTodoWord} left\r\n      </span>\r\n      <ul className=\"filters\">\r\n        {renderFilterLink(ALL_TODOS, \"\", \"All\")}\r\n        {renderFilterLink(ACTIVE_TODOS, \"active\", \"Active\")}\r\n        {renderFilterLink(COMPLETED_TODOS, \"completed\", \"Completed\")}\r\n      </ul>\r\n      <button\r\n        className=\"clear-completed\"\r\n        onClick={() => todoList.clearCompleted()}\r\n      >\r\n        Clear completed\r\n      </button>\r\n    </footer>\r\n  );\r\n});\r\n\r\nfunction pluralize(count, word) {\r\n  return count === 1 ? word : word + \"s\";\r\n}\r\n\r\nexport default Footerview;\r\n","import { ALL_TODOS } from \"../constants\";\nimport { makeObservable, observable } from \"mobx\";\n\nexport default class ViewStore {\n  todoBeingEdited = null;\n  todoFilter = ALL_TODOS;\n  constructor() {\n    makeObservable(this, {\n      todoBeingEdited: observable,\n      todoFilter: observable,\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport TodoList from \"./models/TodoList\";\r\nimport TodoListView from \"./views/TodoListView\";\r\nimport TodoEntry from \"./views/TOdoEntry\";\r\nimport Footerview from \"./views/Footerview\";\r\nimport ViewStore from \"./models/ViewStore\";\r\n\r\nconst ALL_TODOS = \"all\";\r\nconst ACTIVE_TODOS = \"active\";\r\nconst COMPLETED_TODOS = \"completed\";\r\nexport default class App extends Component {\r\n  render() {\r\n    const store = new TodoList([]);\r\n    const viewStore = new ViewStore();\r\n\r\n    return (\r\n      <section class=\"todoapp\">\r\n        <header class=\"header\">\r\n          <h1>todos </h1>\r\n          <TodoEntry todoList={store} />\r\n        </header>\r\n        <section class=\"main\">\r\n          <input id=\"toggle-all\" class=\"toggle-all\" type=\"checkbox\" />\r\n          <label for=\"toggle-all\">Mark all as complete</label>\r\n          <TodoListView todoList={store} viewStore={viewStore} />\r\n        </section>\r\n        <Footerview todoList={store} viewStore={viewStore} />\r\n      </section>\r\n\t);\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}